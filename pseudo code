Application Python
====================
App: #class suprême, lance le deamon proxy, gère le gestionaire d'événement
	run #lance l'application
	deployApp #deploy un serveur d'application
	deployDb #deploy un serveur de base de données

Server: # Class abstraite de serveur (sous windows,linux,etc...)
	create # crée le serveur dans un environement virtuel
	executeCommand # executer commande
	launchSsh # lance deamon de commande
	getLoad # avoir l'état du serveur
	restart # redemarrer
	stop # stop le serveur
	storeLoad # entrer l'état du serveur dans MongoDB
	createSShKey # gérer les clé ssh
	createUser # gérer les utilisateurs
ApacheServer(server): # class pour deployer un serveur apache
	install # install apache
	configureDomain #cnfigure un certain domaine


Proxy: # Proxy routable sur internet
	http # Forward requete HTTP a un serveur application
	bd # Forward requeste SQL a un serveur DB

Forwarder: # Class pour forworder une requete proxy
	start # start le forward
	selectServer # selectionne un serveur
		Regarde collection MongoDB pour le serveur le moins actif pour le domaine demandé
		retourne l'ip du serveur & le port de connection

EventHanlder: #class pour gérer tous les evenemnt du proxy python
	handle # Gère tous les souscriveurs d'événement
	addListener #rajoute un listener
	removeListener # eneleve un listener

Queue: # Class pour publier un message à la queue mongoDB
	addEvent # envoie un message dans la queue mongoDB
	addNotification # envoie une notification à la queue MongoDB
	finishEvent # ajoute la date de fin à l'evenement
	updateNotification #met a jour la notification comme "seen=true"

Database
====================

queuing & realtime data
MongoDB
	DB:server
		Collection:app
			Load # %de charge du serveur
			Cpu_usage # nbthread,% du CPU utilisé
			Ram_usage # mb utilisé,% de la ram utilisé
			Requests { #nombre de requete 
				Date-time : nb requete
			}
			Ip # ip du serveur
			Domaine # domaine pour lequel le serveur répond
			Port # port de connection du serveur pour répondre au requeste HTTP
			last_release # datetime de la dernière release
		Collection:DB
			Load # %de charge du serveur
			Cpu_usage # nbthread,% du CPU utilisé
			Ram_usage # mb utilisé,% de la ram utilisé
			Requests { #nombre de requete 
				Date-time : nb requete
			}
			Ip # ip du serveur
			Domaine # domaine pour lequel le serveur répond
			Port # port de connection du serveur pour répondre au requeste SQL
			DB #nom de la base de données pour ce connecter avec SQL
	DB:queue
		Collection:notification
			id # Id of the notificator subscriber (in broser ID set on connection)
			message # message of the notification
			type # type of the notiication, for grouping
			created_at #datetime
			seen # boolean definissant si la notification a été vue
		Collection:events
			id
			event # nom d'évenement [ create-server | destroy-server | add-db | deploy-app |  ]
			data # des données de l'évenement
			created_at # datetime a laquel l'evenement est emit
			done_at # datetime pour lequel l'action a été fini
			

authentification & website
MySql
	DB:loadbalancer
		Table:users
			ID
			name
			created_at
			updated_at
			subscription
		Table:subscriptions
			ID
			name
			price
		Table:subscriptions_users_pivot
			user_id
			subscription_id
			{STRIP INFO TO BE COMPLETED}
			created_at
			updated_at
			deleted_at
		Table:users_databases
			ID
			user_id
			name
			count

Helper
=============================
creating vms with python and libvirt 
 - http://www.thegeekstuff.com/2014/10/linux-kvm-create-guest-vm/ 
 - http://www.libvirt.org/html/index.html
REST api flask 
 - https://flask-restful.readthedocs.org/en/0.3.2/quickstart.html#a-minimal-api

Load balancer
 - https://serversforhackers.com/so-you-got-yourself-a-loadbalancer
 - https://serversforhackers.com/using-nginx-as-a-load-balancer
Create proxy with python
 - https://code.google.com/p/python-proxy/source/browse/trunk/PythonProxy.py
 - With Twisted http://stackoverflow.com/questions/9465236/python-twisted-proxy-and-modifying-content
Create proxy with C++
 - https://github.com/facebook/proxygen
Vanish pour faire proxy + HAProxy
 - http://varnish-cache.org/
 
Developpement Process
=============================
Python 
1 Proxy 
	Create HTTP Forwarding
	Create MySql Forwording
	Launch Proxy as deamon
2 App
	create app
		app launches proxy as deamon
		app launches node-js server with forever
	handling app
		app can restart proxy deamon
		app can have proxy logs
		app can restart node-js
3 Error Handling
	Create all Event Handlers
4 Event Handling
	Create all Events
	Create EventHandler
	Create node-js websocket error handler
5 Server deployement
	Create a virtual server
	ssh to vritual server
	create ssh abstraction deamon
	
PHP/Laravel
1 Create routes





deploy.App:#Class pour géréer un serveur d'application
	deployApp # deployer application
	installPackages # install basique de paquet requit pour faire tourner le serveur demandé
	installUserPackages # install des paquets utilisateurs
	createVirtualHost # créer un hote virtuel lighthttpd avec un numéro de port libre
	destroyVirtualHost # detruite un hote virtuel lighthttpd avec un numéro de port libre
	createRelease # crée un dossier de release

deploy.Db:#Class pour deployer & gérer un serveur de base de données
	deploy # deployer un sgbd
	installSgbd # install basique (type de sgbd)
	createDb # crée une db sur le un sgbd pour une appli
	destroyDb # detruit une db sur le un sgbd pour une appli
	getSgbd # Retourne le sgbd utilisé pour la connection
	connect # connect le sgbd
	dumpDb # dump la database de l'appli